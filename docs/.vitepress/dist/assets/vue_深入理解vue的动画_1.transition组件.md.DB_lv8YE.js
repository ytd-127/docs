import{_ as n,c as e,a0 as t,o as i}from"./chunks/framework.BGabeMLJ.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue/深入理解vue的动画/1.transition组件.md","filePath":"vue/深入理解vue的动画/1.transition组件.md"}'),o={name:"vue/深入理解vue的动画/1.transition组件.md"};function r(s,a,d,m,p,u){return i(),e("div",null,a[0]||(a[0]=[t('<p>该系列用于记录一些使用方法、demo 以及原理分析。本文介绍 transition 组件，和创建简单 demo 的过程。</p><h2 id="动画过渡" tabindex="-1">动画过渡 <a class="header-anchor" href="#动画过渡" aria-label="Permalink to &quot;动画过渡&quot;">​</a></h2><p>Vue 的动画过渡做得挺强大的，不过平时总是做的管理类项目，几乎不怎么用到动画。这次也是因为要弄个讲课 PPT 才来仔细研究这块，开始以为照着官网看看差不多就可以了，后来才发现这块的内容超出本骚年的想象。嘛，还挺有意思的。</p><h2 id="vue-过渡常用方式" tabindex="-1">Vue 过渡常用方式 <a class="header-anchor" href="#vue-过渡常用方式" aria-label="Permalink to &quot;Vue 过渡常用方式&quot;">​</a></h2><p>Vue 过渡主要分为两类：CSS 动画和Javascript 动画。</p><p>根据官网 (opens new window)的说法，Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果，举例如下：</p><p>在 CSS 过渡和动画中自动应用 class（CSS 动画） 可以配合使用第三方 CSS 动画库，如 Animate.css（CSS 动画） 在过渡钩子函数中使用 JavaScript 直接操作 DOM（Javascript 动画） 可以配合使用第三方 JavaScript 动画库，如 Velocity.js（Javascript 动画） 嗯，也就是上面所说的两类，主要区分是否手动实现还是借用工具实现而已。</p><h2 id="动画过渡的方法和原理" tabindex="-1">动画过渡的方法和原理 <a class="header-anchor" href="#动画过渡的方法和原理" aria-label="Permalink to &quot;动画过渡的方法和原理&quot;">​</a></h2><h2 id="强大的-requestanimationframe" tabindex="-1">强大的 requestAnimationFrame <a class="header-anchor" href="#强大的-requestanimationframe" aria-label="Permalink to &quot;强大的 requestAnimationFrame&quot;">​</a></h2><p>关于 requestAnimationFrame ，如果说没怎么写过动画的，或许几乎没听过。一般来说，大家常用的方式主要是来解决传说中浏览器刷新频率的问题。</p><p>在本骚年以前也写动画的日子里，通常是使用 jQuery ，各种计算然后调用 animate() 等。后面也接触了 CSS3 ， transform 到 animation ， CSS 的动画能力简直要上天了。</p><p>我们来看看MDN (opens new window)上是怎么介绍的吧。</p><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画，并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p><p>window.requestAnimationFrame(callback); callback 一个在每次需要重新绘制动画时调用的包含指定函数的参数。这个回调函数有一个传参，DOMHighResTimeStamp，指示从触发 requestAnimationFrame 回调到现在（重新渲染页面内容之前）的时间。</p><p>返回值 一个 long 整数，请求 ID ，也是回调列表中唯一的标识。 可以传此值到 window.cancelAnimationFrame() 以取消回调函数。</p><p>关于 requestAnimationFrame 能做到的一些 CSS 不能做的，可以参考《CSS3 动画那么强，requestAnimationFrame 还有毛线用？》 (opens new window)看看。</p><p>总之，我们来看看 Vue 里面的相关代码：</p><p>// binding to window is necessary to make hot reload work in IE in strict mode // 此处在不兼容时使用setTimeout进行向下兼容 const raf = inBrowser &amp;&amp; window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;</p><p>export function nextFrame(fn: Function) { raf(() =&gt; { raf(fn); }); } nextFrame 就是 Vue 中用来 CSS 动画过渡的方法，可以在下一次重绘之前进行一些处理。后面讲 CSS 动画过渡的时候我们会再详细点分析。</p><h2 id="关键的-transitionend-和-animationend" tabindex="-1">关键的 transitionend 和 animationend <a class="header-anchor" href="#关键的-transitionend-和-animationend" aria-label="Permalink to &quot;关键的 transitionend 和 animationend&quot;">​</a></h2><p>这两个分别是 CSS 动画中的结束事件， transitionend 是 CSS transition（如 transform/scale 等）结束的触发事件，animationend 则是 CSS 动画（keyframe）结束的触发事件。</p><h2 id="transitionend" tabindex="-1">transitionend <a class="header-anchor" href="#transitionend" aria-label="Permalink to &quot;transitionend&quot;">​</a></h2><p>transitionend 事件会在 CSS transition 结束后触发。以下两种情况不会触发：</p><p>当 transition 完成前移除 transition 时，比如移除 css 的 transition-property 属性。 在 transition 完成前设置 display 为&quot;none&quot;。 // 在指定的元素上监听transitionend事件 element.addEventListener(&quot;transitionend&quot;, callback, false);</p><h2 id="animationend" tabindex="-1">animationend <a class="header-anchor" href="#animationend" aria-label="Permalink to &quot;animationend&quot;">​</a></h2><p>animationend 事件会在一个 CSS 动画完成时触发。与 transitionend 相似，animationend 的触发不包括完成前就已终止的情况，例如元素变得不可见或者动画从元素中移除。</p>',26)]))}const h=n(o,[["render",r]]);export{c as __pageData,h as default};
